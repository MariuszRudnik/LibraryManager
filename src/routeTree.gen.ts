/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as DashboardImport } from './routes/dashboard'
import { Route as IndexImport } from './routes/index'
import { Route as RegisterIndexImport } from './routes/register/index'
import { Route as LoginIndexImport } from './routes/login/index'
import { Route as BookIndexImport } from './routes/book/index'
import { Route as DashboardOutletImport } from './routes/dashboard.outlet'
import { Route as BookBookImport } from './routes/book/$book'

// Create/Update Routes

const DashboardRoute = DashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const RegisterIndexRoute = RegisterIndexImport.update({
  id: '/register/',
  path: '/register/',
  getParentRoute: () => rootRoute,
} as any)

const LoginIndexRoute = LoginIndexImport.update({
  id: '/login/',
  path: '/login/',
  getParentRoute: () => rootRoute,
} as any)

const BookIndexRoute = BookIndexImport.update({
  id: '/book/',
  path: '/book/',
  getParentRoute: () => rootRoute,
} as any)

const DashboardOutletRoute = DashboardOutletImport.update({
  id: '/outlet',
  path: '/outlet',
  getParentRoute: () => DashboardRoute,
} as any)

const BookBookRoute = BookBookImport.update({
  id: '/book/$book',
  path: '/book/$book',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardImport
      parentRoute: typeof rootRoute
    }
    '/book/$book': {
      id: '/book/$book'
      path: '/book/$book'
      fullPath: '/book/$book'
      preLoaderRoute: typeof BookBookImport
      parentRoute: typeof rootRoute
    }
    '/dashboard/outlet': {
      id: '/dashboard/outlet'
      path: '/outlet'
      fullPath: '/dashboard/outlet'
      preLoaderRoute: typeof DashboardOutletImport
      parentRoute: typeof DashboardImport
    }
    '/book/': {
      id: '/book/'
      path: '/book'
      fullPath: '/book'
      preLoaderRoute: typeof BookIndexImport
      parentRoute: typeof rootRoute
    }
    '/login/': {
      id: '/login/'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginIndexImport
      parentRoute: typeof rootRoute
    }
    '/register/': {
      id: '/register/'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

interface DashboardRouteChildren {
  DashboardOutletRoute: typeof DashboardOutletRoute
}

const DashboardRouteChildren: DashboardRouteChildren = {
  DashboardOutletRoute: DashboardOutletRoute,
}

const DashboardRouteWithChildren = DashboardRoute._addFileChildren(
  DashboardRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteWithChildren
  '/book/$book': typeof BookBookRoute
  '/dashboard/outlet': typeof DashboardOutletRoute
  '/book': typeof BookIndexRoute
  '/login': typeof LoginIndexRoute
  '/register': typeof RegisterIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteWithChildren
  '/book/$book': typeof BookBookRoute
  '/dashboard/outlet': typeof DashboardOutletRoute
  '/book': typeof BookIndexRoute
  '/login': typeof LoginIndexRoute
  '/register': typeof RegisterIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteWithChildren
  '/book/$book': typeof BookBookRoute
  '/dashboard/outlet': typeof DashboardOutletRoute
  '/book/': typeof BookIndexRoute
  '/login/': typeof LoginIndexRoute
  '/register/': typeof RegisterIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/book/$book'
    | '/dashboard/outlet'
    | '/book'
    | '/login'
    | '/register'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/dashboard'
    | '/book/$book'
    | '/dashboard/outlet'
    | '/book'
    | '/login'
    | '/register'
  id:
    | '__root__'
    | '/'
    | '/dashboard'
    | '/book/$book'
    | '/dashboard/outlet'
    | '/book/'
    | '/login/'
    | '/register/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DashboardRoute: typeof DashboardRouteWithChildren
  BookBookRoute: typeof BookBookRoute
  BookIndexRoute: typeof BookIndexRoute
  LoginIndexRoute: typeof LoginIndexRoute
  RegisterIndexRoute: typeof RegisterIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DashboardRoute: DashboardRouteWithChildren,
  BookBookRoute: BookBookRoute,
  BookIndexRoute: BookIndexRoute,
  LoginIndexRoute: LoginIndexRoute,
  RegisterIndexRoute: RegisterIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/dashboard",
        "/book/$book",
        "/book/",
        "/login/",
        "/register/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/dashboard": {
      "filePath": "dashboard.tsx",
      "children": [
        "/dashboard/outlet"
      ]
    },
    "/book/$book": {
      "filePath": "book/$book.tsx"
    },
    "/dashboard/outlet": {
      "filePath": "dashboard.outlet.tsx",
      "parent": "/dashboard"
    },
    "/book/": {
      "filePath": "book/index.tsx"
    },
    "/login/": {
      "filePath": "login/index.tsx"
    },
    "/register/": {
      "filePath": "register/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
